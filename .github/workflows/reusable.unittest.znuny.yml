---
name: UnitTest

on:
  workflow_call:
    secrets:
      GIST:
        required: false
    inputs:
      ZNUNY_REF:
        description: "The branch, tag or SHA to checkout."
        required: false
        type: string
        default: dev
      FRAMEWORK:
        description: "otrs / znuny"
        required: false
        type: string
        default: znuny

jobs:
  UnitTest-MySQL:
    name: UnitTest:MySQL
    runs-on: ubuntu-22.04 # ubuntu-latest
    container: debian:10-slim
    env:
      DB: mysql
      MYSQL_USER: "znuny"
      MYSQL_ROOT_PASSWORD: "secret"
      MYSQL_PASSWORD: "secret"
      MYSQL_DATABASE: "znuny"
    services:
      mariadb:
        image: mariadb:10
        env:
          MYSQL_USER: "znuny"
          MYSQL_ROOT_PASSWORD: "secret"
          MYSQL_PASSWORD: "secret"
          MYSQL_DATABASE: "znuny"
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
        env:
          fetch-depth: "1"
        with:
          path: repository

      - name: Check out module-tools
        uses: actions/checkout@v3
        env:
          fetch-depth: "1"
        with:
          repository: znuny/module-tools
          path: module-tools

      - name: Check out Znuny
        uses: actions/checkout@v4
        env:
          fetch-depth: "1"
        with:
          repository: znuny/Znuny
          ref: ${{ inputs.ZNUNY_REF }}
          path: znuny

      - name: Get Framework by Version
        run: |
          if [ -f "znuny/RELEASE" ]
          then
            FRAMEWORK_VERSION=$(grep VERSION "znuny"/RELEASE | sed -e 's/VERSION = //')
            FRAMEWORK_MAJOR=$(echo "$FRAMEWORK_VERSION" | cut -d. -f1)
            FRAMEWORK_MINOR=$(echo "$FRAMEWORK_VERSION" | cut -d. -f2)
            FRAMEWORK_PATCH=$(echo "$FRAMEWORK_VERSION" | cut -d. -f3)
            if [ "$FRAMEWORK_MAJOR" -lt 7 ]
            then
              FRAMEWORK='otrs'
            fi
            echo "FRAMEWORK=$FRAMEWORK" >> "$GITHUB_ENV"
            echo "FRAMEWORK_VERSION=$FRAMEWORK_VERSION" >> "$GITHUB_ENV"
            echo "FRAMEWORK_MAJOR=$FRAMEWORK_MAJOR" >> "$GITHUB_ENV"
            echo "FRAMEWORK_MINOR=$FRAMEWORK_MINOR" >> "$GITHUB_ENV"
            echo "FRAMEWORK_PATCH=$FRAMEWORK_PATCH" >> "$GITHUB_ENV"
          fi

          echo "FRAMEWORK"
          echo "FRAMEWORK_VERSION"

      - name: Install dependencies
        run: |
          cd znuny
          .github/workflows/ci/dependencies.sh

      - name: Install Devel::Cover and Devel::Cover::Report::Clover
        run: |
          apt-get install -y libdevel-cover-perl
          cpanm -i Devel::Cover::Report::Coveralls

      - name: Setup Znuny
        run: |
          cd znuny
          .github/workflows/ci/setup.sh

      - name: Link repository
        run: |
          cd "$GITHUB_WORKSPACE"
          apt-get install -y libdatetime-perl libgetopt-complete-perl libio-interactive-perl libstring-similarity-perl libxmlrpc-lite-perl

          su -c "$GITHUB_WORKSPACE/module-tools/bin/$FRAMEWORK.ModuleTools.pl Module::File::Link $GITHUB_WORKSPACE/repository $GITHUB_WORKSPACE/znuny" - "$FRAMEWORK"

          cd znuny
          su -c "bin/$FRAMEWORK.Console.pl Maint::Cache::Delete" - "$FRAMEWORK"
          su -c "bin/$FRAMEWORK.Console.pl Maint::Config::Rebuild --cleanup" - "$FRAMEWORK"

      - name: Run UnitTests with Coverage
        run: |

          FILES=$(find repository -type f | sed -r "s|repository/||g" | grep -v '^.git' | grep -v '^doc') && echo "$FILES"

          SELECTFILES=$(echo "$FILES" | grep "\.pm$"  | grep -v "Kernel/cpan-lib" | grep -v "Kernel/Language" | grep -v "Kernel/Modules" | grep -v "Kernel/Output" | sed -r "s|(.*)|,-select,&|g" | xargs | sed "s|[[:space:]]||g") && echo "$SELECTFILES"
          if [ -z "$SELECTFILES"  ]
          then
            echo "No files found for coverage check."
            exit 0
          fi

          # get all linked files | grep only .t (UnitTests) | get path | without extension
          UNITTESTS=$(find repository/scripts/test -type f -name \*.t | sed -e 's|.*scripts|scripts|' | sed -e 's|\.t$||') && echo "$UNITTESTS"

          echo "$UNITTESTS"

          UNITTESTS=$(echo "$UNITTESTS" | grep -v "Selenium") && echo "$UNITTESTS"

          echo "$UNITTESTS"

          if [ -z "$UNITTESTS"  ]
          then
            echo "No UnitTest found."
            exit 0
          fi

          su -c "bin/$FRAMEWORK.CheckSum.pl -a create" - "$FRAMEWORK"

          for UNITTEST in $UNITTESTS
          do
            su -c "perl -MDevel::Cover=-silent,1,+ignore,'.*'$SELECTFILES bin/$FRAMEWORK.Console.pl Dev::UnitTest::Run --test $UNITTEST" - "$FRAMEWORK"
          done

          # su -c "perl -MDevel::Cover=-silent,1,+ignore,'.*'$SELECTFILES bin/$FRAMEWORK.Console.pl Dev::UnitTest::Run --sopm-file ${{ github.event.repository.name }}.sopm" - "$FRAMEWORK"

          cd znuny
          su -c "cover >> coverage.txt" - "$FRAMEWORK"
          COVERAGE=$(awk '$1 == "Total" {print $NF+0}' coverage.txt) && echo "COVERAGE: $COVERAGE"
          echo "COVERAGE=$COVERAGE" >> "$GITHUB_ENV"
          echo "GITHUB_REF=${GITHUB_REF##*/}" >> "$GITHUB_ENV"

      - name: Dumper env
        run: echo '${{ toJSON(env) }}'

      - name: Create Coverage Badge
        uses: schneegans/dynamic-badges-action@v1.6.0
        with:
          auth: ${{ secrets.GIST }}
          gistID: e2729bfd9b81d9c032ded617a3f924e7
          filename: ${{ github.event.repository.name }}:coverage:${{ env.GITHUB_REF }}.json
          label: Coverage
          message: ${{ env.COVERAGE }}%
          valColorRange: ${{ env.COVERAGE }}
          minColorRange: 0
          maxColorRange: 100
