---
name: Lint

on:
  workflow_call:
    inputs:
      VALIDATE_ANSIBLE:
        required: false
        type: string
      VALIDATE_ARM:
        required: false
        type: string
      VALIDATE_BASH:
        required: false
        type: string
      VALIDATE_BASH_EXEC:
        required: false
        type: string
      VALIDATE_CPP:
        required: false
        type: string
      VALIDATE_CLANG_FORMAT:
        required: false
        type: string
      VALIDATE_CLOJURE:
        required: false
        type: string
      VALIDATE_CLOUDFORMATION:
        required: false
        type: string
      VALIDATE_COFFEESCRIPT:
        required: false
        type: string
      VALIDATE_CSHARP:
        required: false
        type: string
      VALIDATE_CSS:
        required: false
        type: string
      VALIDATE_DART:
        required: false
        type: string
      VALIDATE_DOCKERFILE_HADOLINT:
        required: false
        type: string
      VALIDATE_EDITORCONFIG:
        required: false
        type: string
      VALIDATE_ENV:
        required: false
        type: string
      VALIDATE_GHERKIN:
        required: false
        type: string
      VALIDATE_GITHUB_ACTIONS:
        required: false
        type: string
      VALIDATE_GITLEAKS:
        required: false
        type: string
      VALIDATE_GO:
        required: false
        type: string
      VALIDATE_GOOGLE_JAVA_FORMAT:
        required: false
        type: string
      VALIDATE_GROOVY:
        required: false
        type: string
      VALIDATE_HTML:
        required: false
        type: string
      VALIDATE_JAVA:
        required: false
        type: string
      VALIDATE_JAVASCRIPT_ES:
        required: false
        type: string
      VALIDATE_JAVASCRIPT_STANDARD:
        required: false
        type: string
        default: 'false'
      VALIDATE_JSCPD:
        required: false
        type: string
        default: 'false'
      VALIDATE_JSON:
        required: false
        type: string
      VALIDATE_JSX:
        required: false
        type: string
      VALIDATE_KOTLIN:
        required: false
        type: string
      VALIDATE_KOTLIN_ANDROID:
        required: false
        type: string
      VALIDATE_KUBERNETES_KUBECONFORM:
        required: false
        type: string
      VALIDATE_LATEX:
        required: false
        type: string
      VALIDATE_LUA:
        required: false
        type: string
      VALIDATE_MARKDOWN:
        required: false
        type: string
      VALIDATE_NATURAL_LANGUAGE:
        required: false
        type: string
      VALIDATE_OPENAPI:
        required: false
        type: string
      VALIDATE_PERL:
        required: false
        type: string
      VALIDATE_PHP:
        required: false
        type: string
      VALIDATE_PHP_BUILTIN:
        required: false
        type: string
      VALIDATE_PHP_PHPCS:
        required: false
        type: string
      VALIDATE_PHP_PHPSTAN:
        required: false
        type: string
      VALIDATE_PHP_PSALM:
        required: false
        type: string
      VALIDATE_POWERSHELL:
        required: false
        type: string
        default: 'false'
      VALIDATE_PROTOBUF:
        required: false
        type: string
      VALIDATE_PYTHON:
        required: false
        type: string
      VALIDATE_PYTHON_BLACK:
        required: false
        type: string
      VALIDATE_PYTHON_FLAKE8:
        required: false
        type: string
      VALIDATE_PYTHON_ISORT:
        required: false
        type: string
      VALIDATE_PYTHON_MYPY:
        required: false
        type: string
        default: 'false'
      VALIDATE_PYTHON_PYLINT:
        required: false
        type: string
      VALIDATE_R:
        required: false
        type: string
      VALIDATE_RAKU:
        required: false
        type: string
      VALIDATE_RENOVATE:
        required: false
        type: string
      VALIDATE_RUBY:
        required: false
        type: string
      VALIDATE_RUST_2015:
        required: false
        type: string
      VALIDATE_RUST_2018:
        required: false
        type: string
      VALIDATE_RUST_2021:
        required: false
        type: string
      VALIDATE_RUST_CLIPPY:
        required: false
        type: string
      VALIDATE_SCALAFMT:
        required: false
        type: string
      VALIDATE_SHELL_SHFMT:
        required: false
        type: string
      VALIDATE_SNAKEMAKE_LINT:
        required: false
        type: string
      VALIDATE_SNAKEMAKE_SNAKEFMT:
        required: false
        type: string
      VALIDATE_STATES:
        required: false
        type: string
      VALIDATE_SQL:
        required: false
        type: string
      VALIDATE_SQLFLUFF:
        required: false
        type: string
      VALIDATE_TEKTON:
        required: false
        type: string
      VALIDATE_TERRAFORM_FMT:
        required: false
        type: string
      VALIDATE_TERRAFORM_TERRASCAN:
        required: false
        type: string
      VALIDATE_TERRAFORM_TFLINT:
        required: false
        type: string
      VALIDATE_TERRAGRUNT:
        required: false
        type: string
      VALIDATE_TSX:
        required: false
        type: string
      VALIDATE_TYPESCRIPT_ES:
        required: false
        type: string
      VALIDATE_TYPESCRIPT_STANDARD:
        required: false
        type: string
      VALIDATE_XML:
        required: false
        type: string
      VALIDATE_YAML:
        required: false
        type: string
    # secrets:
    #   token:
    #     required: true

jobs:
  Lint:
    name: Lint Code Base
    runs-on: ubuntu-22.04 # ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
        env:
          fetch-depth: "1"
        with:
          path: repository

      - name: Check out dennykorsukewitz
        uses: actions/checkout@v3
        env:
          fetch-depth: "1"
        with:
          repository: dennykorsukewitz/dennykorsukewitz
          ref: 'dev'
          path: dennykorsukewitz

      - name: Prepare linters config
        run: cp -R "${GITHUB_WORKSPACE}"/dennykorsukewitz/.github/linters "${GITHUB_WORKSPACE}"/repository/.github/

      - name: Branch Name
        run: echo running on branch "${GITHUB_REF##*/}"

      - name: Show linters config
        run: ls -alih "${GITHUB_WORKSPACE}/repository/.github/linters"

      - name: Set environment variables
        run: |
          if [[ "${{ inputs.VALIDATE_ANSIBLE }}" == "false" ]]; then
            echo "VALIDATE_ANSIBLE=false" >> "$GITHUB_ENV"
          fi
          if [[ "${{ inputs.VALIDATE_ARM }}" == "false" ]]; then
            echo "VALIDATE_ARM=false" >> "$GITHUB_ENV"
          fi
          if [[ "${{ inputs.VALIDATE_BASH }}" == "false" ]]; then
            echo "VALIDATE_BASH=false" >> "$GITHUB_ENV"
          fi
          if [[ "${{ inputs.VALIDATE_BASH_EXEC }}" == "false" ]]; then
            echo "VALIDATE_BASH_EXEC=false" >> "$GITHUB_ENV"
          fi
          if [[ "${{ inputs.VALIDATE_CPP }}" == "false" ]]; then
            echo "VALIDATE_CPP=false" >> "$GITHUB_ENV"
          fi
          if [[ "${{ inputs.VALIDATE_CLANG_FORMAT }}" == "false" ]]; then
            echo "VALIDATE_CLANG_FORMAT=false" >> "$GITHUB_ENV"
          fi
          if [[ "${{ inputs.VALIDATE_CLOJURE }}" == "false" ]]; then
            echo "VALIDATE_CLOJURE=false" >> "$GITHUB_ENV"
          fi
          if [[ "${{ inputs.VALIDATE_CLOUDFORMATION }}" == "false" ]]; then
            echo "VALIDATE_CLOUDFORMATION=false" >> "$GITHUB_ENV"
          fi
          if [[ "${{ inputs.VALIDATE_COFFEESCRIPT }}" == "false" ]]; then
            echo "VALIDATE_COFFEESCRIPT=false" >> "$GITHUB_ENV"
          fi
          if [[ "${{ inputs.VALIDATE_CSHARP }}" == "false" ]]; then
            echo "VALIDATE_CSHARP=false" >> "$GITHUB_ENV"
          fi
          if [[ "${{ inputs.VALIDATE_CSS }}" == "false" ]]; then
            echo "VALIDATE_CSS=false" >> "$GITHUB_ENV"
          fi
          if [[ "${{ inputs.VALIDATE_DART }}" == "false" ]]; then
            echo "VALIDATE_DART=false" >> "$GITHUB_ENV"
          fi
          if [[ "${{ inputs.VALIDATE_DOCKERFILE_HADOLINT }}" == "false" ]]; then
            echo "VALIDATE_DOCKERFILE_HADOLINT=false" >> "$GITHUB_ENV"
          fi
          if [[ "${{ inputs.VALIDATE_EDITORCONFIG }}" == "false" ]]; then
            echo "VALIDATE_EDITORCONFIG=false" >> "$GITHUB_ENV"
          fi
          if [[ "${{ inputs.VALIDATE_ENV }}" == "false" ]]; then
            echo "VALIDATE_ENV=false" >> "$GITHUB_ENV"
          fi
          if [[ "${{ inputs.VALIDATE_GHERKIN }}" == "false" ]]; then
            echo "VALIDATE_GHERKIN=false" >> "$GITHUB_ENV"
          fi
          if [[ "${{ inputs.VALIDATE_GITHUB_ACTIONS }}" == "false" ]]; then
            echo "VALIDATE_GITHUB_ACTIONS=false" >> "$GITHUB_ENV"
          fi
          if [[ "${{ inputs.VALIDATE_GITLEAKS }}" == "false" ]]; then
            echo "VALIDATE_GITLEAKS=false" >> "$GITHUB_ENV"
          fi
          if [[ "${{ inputs.VALIDATE_GO }}" == "false" ]]; then
            echo "VALIDATE_GO=false" >> "$GITHUB_ENV"
          fi
          if [[ "${{ inputs.VALIDATE_GOOGLE_JAVA_FORMAT }}" == "false" ]]; then
            echo "VALIDATE_GOOGLE_JAVA_FORMAT=false" >> "$GITHUB_ENV"
          fi
          if [[ "${{ inputs.VALIDATE_GROOVY }}" == "false" ]]; then
            echo "VALIDATE_GROOVY=false" >> "$GITHUB_ENV"
          fi
          if [[ "${{ inputs.VALIDATE_HTML }}" == "false" ]]; then
            echo "VALIDATE_HTML=false" >> "$GITHUB_ENV"
          fi
          if [[ "${{ inputs.VALIDATE_JAVA }}" == "false" ]]; then
            echo "VALIDATE_JAVA=false" >> "$GITHUB_ENV"
          fi
          if [[ "${{ inputs.VALIDATE_JAVASCRIPT_ES }}" == "false" ]]; then
            echo "VALIDATE_JAVASCRIPT_ES=false" >> "$GITHUB_ENV"
          fi
          if [[ "${{ inputs.VALIDATE_JAVASCRIPT_STANDARD }}" == "false" ]]; then
            echo "VALIDATE_JAVASCRIPT_STANDARD=false" >> "$GITHUB_ENV"
          fi
          if [[ "${{ inputs.VALIDATE_JSCPD }}" == "false" ]]; then
            echo "VALIDATE_JSCPD=false" >> "$GITHUB_ENV"
          fi
          if [[ "${{ inputs.VALIDATE_JSON }}" == "false" ]]; then
            echo "VALIDATE_JSON=false" >> "$GITHUB_ENV"
          fi
          if [[ "${{ inputs.VALIDATE_JSX }}" == "false" ]]; then
            echo "VALIDATE_JSX=false" >> "$GITHUB_ENV"
          fi
          if [[ "${{ inputs.VALIDATE_KOTLIN }}" == "false" ]]; then
            echo "VALIDATE_KOTLIN=false" >> "$GITHUB_ENV"
          fi
          if [[ "${{ inputs.VALIDATE_KOTLIN_ANDROID }}" == "false" ]]; then
            echo "VALIDATE_KOTLIN_ANDROID=false" >> "$GITHUB_ENV"
          fi
          if [[ "${{ inputs.VALIDATE_KUBERNETES_KUBECONFORM }}" == "false" ]]; then
            echo "VALIDATE_KUBERNETES_KUBECONFORM=false" >> "$GITHUB_ENV"
          fi
          if [[ "${{ inputs.VALIDATE_LATEX }}" == "false" ]]; then
            echo "VALIDATE_LATEX=false" >> "$GITHUB_ENV"
          fi
          if [[ "${{ inputs.VALIDATE_LUA }}" == "false" ]]; then
            echo "VALIDATE_LUA=false" >> "$GITHUB_ENV"
          fi
          if [[ "${{ inputs.VALIDATE_MARKDOWN }}" == "false" ]]; then
            echo "VALIDATE_MARKDOWN=false" >> "$GITHUB_ENV"
          fi
          if [[ "${{ inputs.VALIDATE_NATURAL_LANGUAGE }}" == "false" ]]; then
            echo "VALIDATE_NATURAL_LANGUAGE=false" >> "$GITHUB_ENV"
          fi
          if [[ "${{ inputs.VALIDATE_OPENAPI }}" == "false" ]]; then
            echo "VALIDATE_OPENAPI=false" >> "$GITHUB_ENV"
          fi
          if [[ "${{ inputs.VALIDATE_PERL }}" == "false" ]]; then
            echo "VALIDATE_PERL=false" >> "$GITHUB_ENV"
          fi
          if [[ "${{ inputs.VALIDATE_PHP }}" == "false" ]]; then
            echo "VALIDATE_PHP=false" >> "$GITHUB_ENV"
          fi
          if [[ "${{ inputs.VALIDATE_PHP_BUILTIN }}" == "false" ]]; then
            echo "VALIDATE_PHP_BUILTIN=false" >> "$GITHUB_ENV"
          fi
          if [[ "${{ inputs.VALIDATE_PHP_PHPCS }}" == "false" ]]; then
            echo "VALIDATE_PHP_PHPCS=false" >> "$GITHUB_ENV"
          fi
          if [[ "${{ inputs.VALIDATE_PHP_PHPSTAN }}" == "false" ]]; then
            echo "VALIDATE_PHP_PHPSTAN=false" >> "$GITHUB_ENV"
          fi
          if [[ "${{ inputs.VALIDATE_PHP_PSALM }}" == "false" ]]; then
            echo "VALIDATE_PHP_PSALM=false" >> "$GITHUB_ENV"
          fi
          if [[ "${{ inputs.VALIDATE_POWERSHELL }}" == "false" ]]; then
            echo "VALIDATE_POWERSHELL=false" >> "$GITHUB_ENV"
          fi
          if [[ "${{ inputs.VALIDATE_PROTOBUF }}" == "false" ]]; then
            echo "VALIDATE_PROTOBUF=false" >> "$GITHUB_ENV"
          fi
          if [[ "${{ inputs.VALIDATE_PYTHON }}" == "false" ]]; then
            echo "VALIDATE_PYTHON=false" >> "$GITHUB_ENV"
          fi
          if [[ "${{ inputs.VALIDATE_PYTHON_BLACK }}" == "false" ]]; then
            echo "VALIDATE_PYTHON_BLACK=false" >> "$GITHUB_ENV"
          fi
          if [[ "${{ inputs.VALIDATE_PYTHON_FLAKE8 }}" == "false" ]]; then
            echo "VALIDATE_PYTHON_FLAKE8=false" >> "$GITHUB_ENV"
          fi
          if [[ "${{ inputs.VALIDATE_PYTHON_ISORT }}" == "false" ]]; then
            echo "VALIDATE_PYTHON_ISORT=false" >> "$GITHUB_ENV"
          fi
          if [[ "${{ inputs.VALIDATE_PYTHON_MYPY }}" == "false" ]]; then
            echo "VALIDATE_PYTHON_MYPY=false" >> "$GITHUB_ENV"
          fi
          if [[ "${{ inputs.VALIDATE_PYTHON_PYLINT }}" == "false" ]]; then
            echo "VALIDATE_PYTHON_PYLINT=false" >> "$GITHUB_ENV"
          fi
          if [[ "${{ inputs.VALIDATE_R }}" == "false" ]]; then
            echo "VALIDATE_R=false" >> "$GITHUB_ENV"
          fi
          if [[ "${{ inputs.VALIDATE_RAKU }}" == "false" ]]; then
            echo "VALIDATE_RAKU=false" >> "$GITHUB_ENV"
          fi
          if [[ "${{ inputs.VALIDATE_RENOVATE }}" == "false" ]]; then
            echo "VALIDATE_RENOVATE=false" >> "$GITHUB_ENV"
          fi
          if [[ "${{ inputs.VALIDATE_RUBY }}" == "false" ]]; then
            echo "VALIDATE_RUBY=false" >> "$GITHUB_ENV"
          fi
          if [[ "${{ inputs.VALIDATE_RUST_2015 }}" == "false" ]]; then
            echo "VALIDATE_RUST_2015=false" >> "$GITHUB_ENV"
          fi
          if [[ "${{ inputs.VALIDATE_RUST_2018 }}" == "false" ]]; then
            echo "VALIDATE_RUST_2018=false" >> "$GITHUB_ENV"
          fi
          if [[ "${{ inputs.VALIDATE_RUST_2021 }}" == "false" ]]; then
            echo "VALIDATE_RUST_2021=false" >> "$GITHUB_ENV"
          fi
          if [[ "${{ inputs.VALIDATE_RUST_CLIPPY }}" == "false" ]]; then
            echo "VALIDATE_RUST_CLIPPY=false" >> "$GITHUB_ENV"
          fi
          if [[ "${{ inputs.VALIDATE_SCALAFMT }}" == "false" ]]; then
            echo "VALIDATE_SCALAFMT=false" >> "$GITHUB_ENV"
          fi
          if [[ "${{ inputs.VALIDATE_SHELL_SHFMT }}" == "false" ]]; then
            echo "VALIDATE_SHELL_SHFMT=false" >> "$GITHUB_ENV"
          fi
          if [[ "${{ inputs.VALIDATE_SNAKEMAKE_LINT }}" == "false" ]]; then
            echo "VALIDATE_SNAKEMAKE_LINT=false" >> "$GITHUB_ENV"
          fi
          if [[ "${{ inputs.VALIDATE_SNAKEMAKE_SNAKEFMT }}" == "false" ]]; then
            echo "VALIDATE_SNAKEMAKE_SNAKEFMT=false" >> "$GITHUB_ENV"
          fi
          if [[ "${{ inputs.VALIDATE_STATES }}" == "false" ]]; then
            echo "VALIDATE_STATES=false" >> "$GITHUB_ENV"
          fi
          if [[ "${{ inputs.VALIDATE_SQL }}" == "false" ]]; then
            echo "VALIDATE_SQL=false" >> "$GITHUB_ENV"
          fi
          if [[ "${{ inputs.VALIDATE_SQLFLUFF }}" == "false" ]]; then
            echo "VALIDATE_SQLFLUFF=false" >> "$GITHUB_ENV"
          fi
          if [[ "${{ inputs.VALIDATE_TEKTON }}" == "false" ]]; then
            echo "VALIDATE_TEKTON=false" >> "$GITHUB_ENV"
          fi
          if [[ "${{ inputs.VALIDATE_TERRAFORM_FMT }}" == "false" ]]; then
            echo "VALIDATE_TERRAFORM_FMT=false" >> "$GITHUB_ENV"
          fi
          if [[ "${{ inputs.VALIDATE_TERRAFORM_TERRASCAN }}" == "false" ]]; then
            echo "VALIDATE_TERRAFORM_TERRASCAN=false" >> "$GITHUB_ENV"
          fi
          if [[ "${{ inputs.VALIDATE_TERRAFORM_TFLINT }}" == "false" ]]; then
            echo "VALIDATE_TERRAFORM_TFLINT=false" >> "$GITHUB_ENV"
          fi
          if [[ "${{ inputs.VALIDATE_TERRAGRUNT }}" == "false" ]]; then
            echo "VALIDATE_TERRAGRUNT=false" >> "$GITHUB_ENV"
          fi
          if [[ "${{ inputs.VALIDATE_TSX }}" == "false" ]]; then
            echo "VALIDATE_TSX=false" >> "$GITHUB_ENV"
          fi
          if [[ "${{ inputs.VALIDATE_TYPESCRIPT_ES }}" == "false" ]]; then
            echo "VALIDATE_TYPESCRIPT_ES=false" >> "$GITHUB_ENV"
          fi
          if [[ "${{ inputs.VALIDATE_TYPESCRIPT_STANDARD }}" == "false" ]]; then
            echo "VALIDATE_TYPESCRIPT_STANDARD=false" >> "$GITHUB_ENV"
          fi
          if [[ "${{ inputs.VALIDATE_XML }}" == "false" ]]; then
            echo "VALIDATE_XML=false" >> "$GITHUB_ENV"
          fi
          if [[ "${{ inputs.VALIDATE_YAML }}" == "false" ]]; then
            echo "VALIDATE_YAML=false" >> "$GITHUB_ENV"
          fi

      - name: Lint Code Base
        uses: github/super-linter@v4
        env:
          DEFAULT_BRANCH: "${GITHUB_REF##*/}"
          GITHUB_TOKEN: "${secrets.GITHUB_TOKEN}"
          LINTER_RULES_PATH: "./repository/.github/linters"
          USE_FIND_ALGORITHM: true
          FILTER_REGEX_EXCLUDE: "(.*.scss)"
          IGNORE_GITIGNORED_FILES: true
          DEFAULT_WORKSPACE: "${GITHUB_WORKSPACE}/repository"
