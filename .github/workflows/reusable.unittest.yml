---
name: UnitTest

on:
  workflow_call:
    secrets:
      GIST:
        required: false

jobs:
  UnitTest-MySQL:
    name: UnitTest:MySQL
    runs-on: ubuntu-22.04 # ubuntu-latest
    container: debian:10-slim
    env:
      DB: mysql
      MYSQL_USER: "otrs"
      MYSQL_ROOT_PASSWORD: "secret"
      MYSQL_PASSWORD: "secret"
      MYSQL_DATABASE: "otrs"
    services:
      mariadb:
        image: mariadb:10
        env:
          MYSQL_USER: "otrs"
          MYSQL_ROOT_PASSWORD: "secret"
          MYSQL_PASSWORD: "secret"
          MYSQL_DATABASE: "otrs"
    steps:

      - name: Check out repository code
        uses: actions/checkout@v3
        env:
          fetch-depth: "1"
        with:
          path: repository

      - name: Check out module-tools
        uses: actions/checkout@v3
        env:
          fetch-depth: "1"
        with:
          repository: znuny/module-tools
          path: module-tools

      - name: Check out Znuny
        uses: actions/checkout@v3
        env:
          fetch-depth: "1"
        with:
          repository: znuny/Znuny
          path: znuny

      - name: Install dependencies
        run: znuny/.github/workflows/ci/dependencies.sh

      - name: Install Devel::Cover and Devel::Cover::Report::Clover
        run: |
          apt-get install -y libdevel-cover-perl
          cpanm -i Devel::Cover::Report::Coveralls

      - name: Setup Znuny
        run: |
          cd znuny

          a2dismod mpm_event mpm_worker
          a2enmod perl deflate filter headers mpm_prefork
          useradd -d /opt/otrs -c 'OTRS user' -g www-data -s /bin/bash -M otrs

          # link and create files
          ln -sf "$PWD" /opt/otrs
          ln -s /opt/otrs/scripts/apache2-httpd.include.conf /etc/apache2/sites-enabled/zzz_otrs.conf
          cp /opt/otrs/Kernel/Config.pm.dist /opt/otrs/Kernel/Config.pm
          mkdir -p /opt/otrs/var/tmp

          # start apache
          apachectl start

          # MySQL
          .github/workflows/ci/config-mysql.sh

          # run needed scripts
          /opt/otrs/bin/otrs.SetPermissions.pl
          su -c "bin/otrs.CheckSum.pl -a create" - otrs
          touch /opt/otrs/installed

          # prepare Selenium tests
          .github/workflows/ci/config-selenium.sh

          su -c "bin/otrs.Console.pl Maint::Config::Rebuild" - otrs
          su -c "bin/otrs.Console.pl Admin::Config::Update --setting-name CheckEmailAddresses --value 0" - otrs

      - name: Link repository
        run: |
          cd "$GITHUB_WORKSPACE"
          apt-get install -y libdatetime-perl libgetopt-complete-perl libio-interactive-perl libstring-similarity-perl libxmlrpc-lite-perl

          su -c "$GITHUB_WORKSPACE/module-tools/bin/otrs.ModuleTools.pl Module::File::Link $GITHUB_WORKSPACE/repository $GITHUB_WORKSPACE/znuny" - otrs
          cd znuny
          su -c "bin/otrs.Console.pl Maint::Cache::Delete" - otrs
          su -c "bin/otrs.Console.pl Maint::Config::Rebuild --cleanup" - otrs

      - name: Run UnitTests with Coverage
        run: |
          FILES=$(find repository -type f | sed -r "s|repository/||g" | grep -v '^.git' | grep -v '^doc') && echo "$FILES"

          SELECTFILES=$(echo "$FILES" | grep "\.pm$"  | grep -v "Kernel/cpan-lib" | grep -v "Kernel/Language" | grep -v "Kernel/Modules" | grep -v "Kernel/Output" | sed -r "s|(.*)|,-select,&|g" | xargs | sed "s|[[:space:]]||g") && echo "$SELECTFILES"
          if [ -z "$SELECTFILES"  ]; then echo "No files found for coverage check." && exit 0 ;fi

          su -c "bin/otrs.CheckSum.pl -a create" - otrs
          su -c "perl -MDevel::Cover=-silent,1,+ignore,'.*'$SELECTFILES bin/otrs.Console.pl Dev::UnitTest::Run --sopm-file ${{ github.event.repository.name }}.sopm" - otrs
          cd znuny
          su -c "cover >> coverage.txt" - otrs
          COVERAGE=$(awk '$1 == "Total" {print $NF+0}' coverage.txt) && echo "COVERAGE: $COVERAGE"
          echo "COVERAGE=$COVERAGE" >> "$GITHUB_ENV"
          echo "GITHUB_REF=${GITHUB_REF##*/}" >> "$GITHUB_ENV"

      - name: Dumper env
        run: echo '${{ toJSON(env) }}'

      - name: Create Coverage Badge
        uses: schneegans/dynamic-badges-action@v1.6.0
        with:
          auth: ${{ secrets.GIST }}
          gistID: e2729bfd9b81d9c032ded617a3f924e7
          filename: ${{ github.event.repository.name }}:coverage:${{ env.GITHUB_REF }}.json
          label: Coverage
          message: ${{ env.COVERAGE }}%
          valColorRange: ${{ env.COVERAGE }}
          minColorRange: 0
          maxColorRange: 100
